# -*- coding: utf-8 -*-
"""Copy of Total_data_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yLOExTKDFsgW-teGenJgXjbjWVyZlum5
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

pdata = pd.read_csv('match_data_3.csv')

pdata.columns

len(pdata.match_name.unique())

pdata.dtypes

pdata = pdata.astype({'match_country':'string'})
pdata = pdata.astype({'match_name':'string'})
pdata = pdata.astype({'name':'string'})
pdata = pdata.astype({'team1_name':'string'})
pdata = pdata.astype({'team2_name':'string'})
pdata = pdata.astype({'team_name':'string'})
pdata = pdata.astype({'out_by':'string'})
pdata.dtypes

pdata["ECO"] = pdata["runs_given"] / pdata["overs"]
pdata["ECO"].isna().sum()
pdata['ECO'] = pdata['ECO'].fillna(0)
pdata.head()

pdata['country'] = pdata['match_country'].str[:-5]

pdata['country'].unique()

pdata['country'] = pdata['country'].replace(['australia-20'], 'australia')
pdata['country'].unique()

pdata['url'].value_counts()

pdata.isna().sum()

pdata = pdata.dropna()

# pdata['team_name'].dtypes
pdata['team_name'] = pdata['team_name'].map(str.lower)
pdata['team1_name'] = pdata['team1_name'].map(str.lower)
pdata['team2_name'] = pdata['team2_name'].map(str.lower)
# pdata['team_name'].unique()

# pdata['team2_name'].dtypes
# pdata['team2_name'].unique()

# pdata['team2_name'].head()

pdata['name'].value_counts()

len(pdata['name'].unique())

pdata['team1_name'].value_counts()/11

country_names = pdata['country'].unique()
country_names

pdata['country'] = pdata['country'].replace(['new-zealand'], 'new zealand')
pdata['country'] = pdata['country'].replace(['west-indies'], 'west indies')
pdata['country'] = pdata['country'].replace(['sri-lanka'], 'sri lanka')

country_mappings = {
  "india": "1",
  "bangladesh": "2",
  "new zealand": "3",
  'west indies': "4",
  'england': "5",
  'sri lanka': "6",
  'australia': "7",
  "south africa": "8",
}

# pdata['country'] = pdata['country'].apply(lambda x: countries[x])
# pdata.head()

# countries = {
#   1: "india",
#   2: "bangladesh",
#   3: "new-zealand",
#   4: "west-indies",
#   5 :"england",
#   6: "sri-lanka",
#   7: "australia"
# }

country_mappings_rev = {v: k for k, v in country_mappings.items()}


# pdata['country'] = pdata['country'].map(country_mappings)
# pdata['team1_name'] = pdata['team1_name'].map(country_mappings)
# pdata['team2_name'] = pdata['team2_name'].map(country_mappings)
# pdata['team_name'] = pdata['team_name'].map(country_mappings)

pdata['country'].replace(country_mappings, inplace=True)
pdata['team1_name'].replace(country_mappings, inplace=True)
pdata['team2_name'].replace(country_mappings, inplace=True)
pdata['team_name'].replace(country_mappings, inplace=True)

pdata.head()

# # Mapping country value with country name
# pdata['country'] = pdata['country'].map(country_mappings_rev)
# pdata.head()

cdata = pdata

cdata = cdata.groupby(['name'])

pdata.columns

average_strike_rate = pdata.groupby(['name'])['strike_rate'].mean()
average_strike_rate

cdata.get_group('Suryakumar Yadav')

pdata['match_country'].unique()

pdata.columns

## generating target variable
pdata['winner'] = np.where(
    pdata['team1_score'] > pdata['team2_score'], pdata['team1_name'], np.where(
    pdata['team2_score'] >  pdata['team1_score'], pdata['team2_name'], "Tie"))

pdata.head(5)

X = pdata.iloc[:,[5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]].values
y = pdata.iloc[:, 25].values

def custom_accuracy(y_test,y_pred,thresold):
    right = 0

    l = len(y_pred)
    for i in range(0,l):
        if(abs(y_pred[i]-y_test[i]) <= thresold):
            right += 1
    return ((right/l)*100)


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Training the dataset
from sklearn.ensemble import RandomForestRegressor
reg = RandomForestRegressor(n_estimators=100,max_features=None)
reg.fit(X_train,y_train)

pdata.dtypes

pdata = pdata.astype({'team1_score':'float64'})
pdata = pdata.astype({'team2_score':'float64'})
pdata = pdata.astype({'runs_scored':'string'})
pdata = pdata.astype({'balls_faced':'string'})
pdata = pdata.astype({'fours':'string'})
pdata = pdata.astype({'sixes':'string'})
pdata = pdata.astype({'maiden':'string'})
pdata = pdata.astype({'match_country':'string'})
pdata = pdata.astype({'match_country':'string'})
pdata = pdata.astype({'match_country':'string'})
pdata = pdata.astype({'match_country':'string'})

pdata = pdata.astype({'country':'float64'})

# Testing the dataset on trained model
y_pred = reg.predict(X_test)
score = reg.score(X_test,y_test)*100
print("R square value:" , score)
#print("Custom accuracy:" , custom_accuracy(y_test,y_pred,20))

# Testing with a custom input
import numpy as np
new_prediction = reg.predict(sc.transform(np.array([[100,0,13,50,50,0, 0, 2, 1, 0, 0, 5,0 ]])))
print("Prediction score:" , new_prediction)

from sklearn.model_selection import cross_val_score
#clf = svm.SVC(kernel='linear', C=1, random_state=42)
scores = cross_val_score(reg, X, y, cv=5)
scores